// https://www.ibm.com/docs/en/i/7.3?topic=functions-scalar
{
  "upper": {
    "prefix": "upper",
    "body": "upper(${1:string})",
  },
  "lower": {
    "prefix": "lower",
    "body": "lower(${1:string})",
  },
  "abs": {
    "prefix": "abs",
    "body": "abs(${1:number})",
    "description": "The ABS function returns the absolute value of a number."
  },
  "absval": {
    "prefix": "absval",
    "body": "absval(${1:number})",
    "description": "The ABS function returns the absolute value of a number."
  },
  "acos": {
    "prefix": "acos",
    "body": "acos(${1:number})",
    "description": "The ACOS function returns the arc cosine of the argument as an angle expressed in radians. The ACOS and COS functions are inverse operations."
  },
  "add_months": {
    "prefix": "add_months",
    "body": "add_months(${1:datetime}, ${2:number})",
    "description": "The ADD_MONTHS function returns a date or timestamp that represents expression plus numeric-expression months."
  },
  "antilog": {
    "prefix": "antilog",
    "body": "antilog(${1:number})",
    "description": "The ANTILOG function returns the anti-logarithm (base 10) of a number. The ANTILOG and LOG functions are inverse operations."
  },
  "array_max_cardinality": {
    "prefix": "array_max_cardinality",
    "body": "array_max_cardinality(${1:array})",
    "description": "The ARRAY_MAX_CARDINALITY function returns a value representing the maximum number of elements an array can contain. This is the cardinality specified on the CREATE TYPE (Array) statement for the user-defined array type."
  },
  "array_trim": {
    "prefix": "array_trim",
    "body": "array_trim(${1:array}, ${2:number})",
    "description": "The ARRAY_TRIM function returns a copy of the array argument from which the specified number of elements have been removed from the end of the array."
  },
  "ascii": {
    "prefix": "ascii",
    "body": "ascii(${1:string/number})",
    "description": "The ASCII function returns the ASCII code value of the leftmost character of the argument as an integer."
  },
  "asin": {
    "prefix": "asin",
    "body": "asin(${1:number})",
    "description": "The ASIN function returns the arc sine of the argument as an angle expressed in radians. The ASIN and SIN functions are inverse operations."
  },
  "atan": {
    "prefix": "atan",
    "body": "atan(${1:number})",
    "description": "The ATAN function returns the arc tangent of the argument as an angle expressed in radians. The ATAN and TAN functions are inverse operations."
  },
  "atanh": {
    "prefix": "atanh",
    "body": "atanh(${1:number})",
    "description": "The ATANH function returns the hyperbolic arc tangent of a number, in radians. The ATANH and TANH functions are inverse operations."
  },
  "atan2": {
    "prefix": "atan2",
    "body": "atan2(${1:number}, ${2:number})",
    "description": "The ATAN2 function returns the arc tangent of x and y coordinates as an angle expressed in radians. The first and second arguments specify the x and y coordinates, respectively."
  },
  "base64_decode": {
    "prefix": "base64_decode",
    "body": "base64_decode(${1:string})",
    "description": "The BASE64_DECODE scalar function returns a character string that has been Base64 decoded. Base64 encoding is widely used to represent binary data as a string."
  },
  "base64_encode": {
    "prefix": "base64_encode",
    "body": "base64_encode(${1:binary_string})",
    "description": "The BASE64_ENCODE scalar function returns the Base64 encoded version of a binary value."
  },
  "bigint": {
    "prefix": "bigint",
    "body": "bigint(${1:number/string/datetime})",
    "description": "The BIGINT function returns a big integer representation."
  },
  "binary":{
    "prefix": "binary",
    "body": "binary(${1:string}, ${2:int16})",
    "description": "The BINARY function returns a BINARY representation of a string of any type."
  },
  "bitand": {
    "prefix": "bitand",
    "body": "bitand(${1:number}, ${2:number})",
    "description": "These bitwise functions operate on the \"two's complement\" representation of the integer value of the input arguments and return the result as a corresponding base 10 integer value in a data type based on the data type of the input arguments."
  },
  "bitandnot": {
    "prefix": "bitandnot",
    "body": "bitandnot(${1:number}, ${2:number})",
    "description": "These bitwise functions operate on the \"two's complement\" representation of the integer value of the input arguments and return the result as a corresponding base 10 integer value in a data type based on the data type of the input arguments."
  },
  "bitor": {
    "prefix": "bitor",
    "body": "bitor(${1:number}, ${2:number})",
    "description": "These bitwise functions operate on the \"two's complement\" representation of the integer value of the input arguments and return the result as a corresponding base 10 integer value in a data type based on the data type of the input arguments."
  },
  "bitxor": {
    "prefix": "bitxor",
    "body": "bitxor(${1:number}, ${2:number})",
    "description": "These bitwise functions operate on the \"two's complement\" representation of the integer value of the input arguments and return the result as a corresponding base 10 integer value in a data type based on the data type of the input arguments."
  },
  "bitnot": {
    "prefix": "bitnot",
    "body": "bitnot(${1:number})",
    "description": "These bitwise functions operate on the \"two's complement\" representation of the integer value of the input arguments and return the result as a corresponding base 10 integer value in a data type based on the data type of the input arguments."
  },
  "bit_length": {
    "prefix": "bit_length",
    "body": "bit_length(${1:string/number})",
    "description": "The BIT_LENGTH function returns the length of a string expression in bits."
  },
  "blob": {
    "prefix": "blob",
    "body": "blob(${1:binary_string}, ${2:int})",
    "description": "The BLOB function returns a BLOB representation of a string of any type."
  },
  "bson_to_json":{
    "prefix": "bson_to_json",
    "body": "bson_to_json(${1:bson})",
    "description": "The BSON_TO_JSON function converts a string containing formatted BSON data to a character string containing the data formatted as JSON."
  },
  "cardinality":{
    "prefix": "cardinality",
    "body": "cardinality(${1:array})",
    "description": "The CARDINALITY function returns a value representing the number of elements of an array."
  },
  "ceiling":{
    "prefix": "ceiling",
    "body": "ceiling(${1:number})",
    "description": "The CEILING or CEIL function returns the smallest integer value that is greater than or equal to expression."
  },
  "ceil":{
    "prefix": "ceil",
    "body": "ceil(${1:number})",
    "description": "The CEILING or CEIL function returns the smallest integer value that is greater than or equal to expression."
  },
  "character_length": {
    "prefix": "character_length",
    "body": "character_length(${1:string})",
    "description": "The CHARACTER_LENGTH or CHAR_LENGTH function returns the length of a string expression."
  },
  "char_length": {
    "prefix": "char_length",
    "body": "char_length(${1:string})",
    "description": "The CHARACTER_LENGTH or CHAR_LENGTH function returns the length of a string expression."
  },
  "chr": {
    "prefix": "chr",
    "body": "chr(${1:number})",
    "description": "The CHR function returns the EBCDIC character that has the ASCII code value specified by the argument. If expression is 0, the result is the blank character."
  },
  "clob": {
    "prefix": "clob",
    "body": "clob(${1:string}, ${2:int?})",
    "description": "The CLOB function returns a character-string representation."
  },
  "coalesce": {
    "prefix": "coalesce",
    "body": "coalesce(${1:expression}, ${2:...})",
    "description": "The COALESCE function returns the value of the first non-null expression."
  },
  "compare_decfloat": {
    "prefix": "compare_decfloat",
    "body": "compare_decfloat(${1:expression}, ${2:expression})",
    "description": "The COMPARE_DECFLOAT function returns an ordering for DECFLOAT values."
  },
  "concat": {
    "prefix": "concat",
    "body": "concat(${1:expression}, ${2:expression})",
    "description": "The CONCAT function combines two arguments."
  },
  "contains": {
    "prefix": "contains",
    "body": "contains(${1:string}, ${2:string}, {3:options?})",
    "description": "The CONTAINS function searches a text search index using criteria that are specified in a search argument and returns a result about whether or not a match was found."
  },
  "cos": {
    "prefix": "cos",
    "body": "cos(${1:number})",
    "description": "The COS function returns the cosine of the argument, where the argument is an angle expressed in radians. The COS and ACOS functions are inverse operations."
  },
  "cosh": {
    "prefix": "cosh",
    "body": "cosh(${1:number})",
    "description": "The COSH function returns the hyperbolic cosine of the argument, where the argument is an angle expressed in radians."
  },
  "cot": {
    "prefix": "cot",
    "body": "cot(${1:number})",
    "description": "The COT function returns the cotangent of the argument, where the argument is an angle expressed in radians."
  },
  "curdate": {
    "prefix": "curdate",
    "body": "curdate()",
    "description": "The CURDATE function returns a date based on a reading of the time-of-day clock when the SQL statement is executed at the current server. The value returned by the CURDATE function is the same as the value returned by the CURRENT DATE special register."
  },
  "curtime": {
    "prefix": "curtime",
    "body": "curtime()",
    "description": "The CURTIME function returns a time based on a reading of the time-of-day clock when the SQL statement is executed at the current server. The value returned by the CURTIME function is the same as the value returned by the CURRENT TIME special register."
  },
  "xmlvalidate": {
    "prefix": "xmlvalidate",
    "body": "xmlvalidate(${1:XML-expression} ${2:ACCORDING TO XML SCHEMA ${3:ID XML-schema-name|{$4:URI XML-uri1|NO NAMESPACE} {$5:LOCATION XML-uri2}}}))",
    "description": "The XMLVALIDATE function returns a copy of the input XML value augmented with information obtained from XML schema validation, including default values and type annotations."
  },
  "xor": {
    "prefix": "xor",
    "body": "xor(${1:expression}, ${2:expression+})",
    "description": "The XOR function returns a string that is the logical XOR of the argument strings. This function takes the first argument string, does an XOR operation with the next string, and then continues to do XOR operations for each successive argument using the previous result."
  },
  "xsltransform": {
    "prefix": "xsltransform",
    "body": "xsltransform(${1:XML-document} USING ${2:xsl-stylesheet} {$3:WITH xsl-parameters?} {$4:AS data-type?})",
    "description": "The XSLTRANSFORM transforms an XML document into a different data format. The data can be transformed into any form possible for the XSLT processor."
  },
  "year": {
    "prefix": "year",
    "body": "year(${1:expression})",
    "description": "The YEAR function returns the year part of a value"
  },
  "zoned": {
    "prefix": "zoned",
    "body": "zoned(${1:expression}, ${2:precision?}, ${3:scale?}, ${4:decimal-character})",
    "description": "The ZONED function returns a zoned decimal representation."
  }
}